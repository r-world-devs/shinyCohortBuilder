[{"path":"https://github.com/r-world-devs/shinyCohortBuilder/articles/gui-filter-layer.html","id":"gui-filter-layer-as-a-s3-method","dir":"Articles","previous_headings":"","what":"GUI Filter Layer as a S3 Method","title":"Implementing custom GUI filter layer","text":"working cohortBuilder order configure filter need precise type: filter evaluated Source (operation happens within Cohort) becomes object class equal filter type: needs let’s highlight methods parameters originally stored withing evaluated filter object: shinyCohortBuilder extends filter attaching GUI-specific methods using .gui_filter S3 method. methods available filter$gui object. , order implement custom filter controller need create .gui_filter.<filter-type> function. method takes filter (evaluated source) argument return list objects: input - UI structure defining filter input controllers. feedback - List defining feedback plot output. server - Optional server-side expression attached filter panel (e.g. filter specific observers). update - expression used updating filter panel based configuration. post_stats - TRUE post statistics displayed filter controller (e.g. discrete filter). FALSE, operations skipped results better performance. multi_input - TRUE multiple input controllers used providing filter value (e.g. range input numericInput sliderInput used). FALSE, operations skipped results better performance. describe requirements exact role object. base description using “discrete” filter example.","code":"library(cohortBuilder) #>  #> Attaching package: 'cohortBuilder' #> The following objects are masked from 'package:stats': #>  #>     filter, step iris_source <- set_source(tblist(iris = iris)) species_filter <- filter(   type = \"discrete\",    id = \"species\",   dataset = \"iris\",   variable = \"Species\",   value = \"setosa\" ) evaled_filter <- species_filter(iris_source) class(evaled_filter) #> [1] \"cb_filter\" \"discrete\" str(evaled_filter, give.attr = FALSE) #> List of 10 #>  $ id          : chr \"species\" #>  $ type        : 'discrete' chr \"discrete\" #>  $ name        : chr \"species\" #>  $ input_param : chr \"value\" #>  $ filter_data :function (data_object)   #>  $ get_stats   :function (data_object, name)   #>  $ plot_data   :function (data_object)   #>  $ get_params  :function (name)   #>  $ get_data    :function (data_object)   #>  $ get_defaults:function (data_object, cache_object)"},{"path":"https://github.com/r-world-devs/shinyCohortBuilder/articles/gui-filter-layer.html","id":"input","dir":"Articles","previous_headings":"GUI Filter Layer as a S3 Method","what":"input","title":"Implementing custom GUI filter layer","text":"input function returning UI structure filter input controllers (content visible filter enrolled filtering panel). takes two argument: input_id - Concatenation step_id filter_id (plus namespace). Can used input controller id (doesn’t ). cohort - Cohort object. Example implementation (simplified version used “discrete” filter): can realize, based construction, inside input function can use arguments also filter object parent environment. way can access methods metadata originally attached filter (.e. parameters via filter$get_params()). can see function returns list (tagList) two input controllers: checkboxGroupInput - responsible setting filter value, keep_na_input - helper function returning checkbox responsible inclusion/exclusion NA values (value keep_na filter argument). important input controllers wrapped .cb_input function. Let’s first describe meaning .cb_input. function responsible registering changes input controller updating corresponding filter argument (value controller). may spot, pass filter$input_param \"keep_na\" second argument .cb_input checkboxGroupInput keep_na_input respectively. second argument informs shinyCohortBuilder via .cb_input argument exactly updated filter changing controller input. reason keep name filter parameter responsible data filtering (input_param) inside cohortBuilder’s filter (name may differ various filter types .e. “value” discrete filter, “range” range filter). second effect .cb_input input controllers wrapped function sensitive browser-site actions. means filter arguments updated user changes value filtering panel - updating input server update* function affect controller visually. effect taken assure unneeded reactivity triggers run. make clear let’s consider situation filter panel consists one discrete filter display post statistics nearby checkbox option.  changing selection filter : Update filter value Cohort. Trigger data calculations. Update post statistics filter Cohort. Update input controller choices new statistics included. last step taken using update* function, triggers shiny:inputchanged JS event shinyCohortBuilder uses updating filter arguments. behavior results another round steps end reactivity loop. Using .cb_input assures shiny:inputchanged JS event doesn’t trigger another filter parameters update called using update* method. Let’s move now describe assumptions writing custom input method .gui_filter. Looking code sample: can see internal function discrete_input_params used create list parameters sent shiny::checkboxGroupInput. writing function take consideration assumptions: data exists previous step parameters return empty input controller. discrete filter (checkboxGroupInput) achieve : : ’s recommended use cached statistics saved Cohort object minimize amount operations. cached information specific filter computed get_stats filter method. case discrete filter (“tblist” source data type) computes: choices - named list storing counts variable level, n_data - integer storing number non-missing values, n_missing - integer storing number NAs filter value NA, controller select available options (range). may get current filter parameters : value : Extracting possible options can done : Filter controller choices based previous step. can easily extracted using previous step cache: value mapping defined filter used convert choices labels accordingly. can check value mapping defined : access value mapping function : filters displays pre/post statistics (.e. discrete filter ) assure ones included according filter labels. case may use helper .choice_names function: returns labels selected statistics brackets added. function returns labels HTML structure attaching proper classes current step labels. (HTML) class used grey label working Run Button feature. filter controller label attached. checkboxGroupInput (shiny controllers) can achieved label = NULL.","code":".gui_filter.discrete <- function(filter, ...) {   list(     input = function(input_id, cohort) {       shiny::tagList(         .cb_input(           do.call(             shiny::checkboxGroupInput,             discrete_input_params(filter, input_id, cohort, ...)           ),           filter$input_param         ),         .cb_input(           keep_na_input(input_id, filter, cohort),           \"keep_na\"         )       )     },     # other objects   ) } do.call(   shiny::checkboxGroupInput,   discrete_input_params(filter, input_id, cohort, ...) ) if (!cohort$get_cache(step_id, filter_id, state = \"pre\")$n_data) {   return(     list(inputId = input_id, choices = character(0), selected = character(0), label = NULL)   ) } step_id <- filter$step_id filter_id <- filter$id filter_params <- filter$get_params() filter_params[[filter$input_param]] names(   cohort$get_cache(step_id, filter_id, state = \"pre\")$choices   ) names(   cohort$get_cache(step_id, filter_id, state = \"pre\")$choices   ) !is.null(filter_params$value_mapping) cohort$get_source()$attributes$value_mappings[[filter_params$value_mapping]] .choice_names(   name = <choices labels names vector>,   current = <current step statistics vector>,   previous = <previous step statistics vector>,   stats = <\"pre, post\", both or NULL> # it's recommended to use `stats = cohort$attributes$stats` to inherit the option from Cohort configuration ) .choice_names(   name = c(\"A\", \"B\"),   current = 1:2,   previous = 3:4,   stats = c(\"pre\", \"post\") ) #> <span>A (<span class = 'cb_delayed'>1<\/span> / 3)<\/span> #> <span>B (<span class = 'cb_delayed'>2<\/span> / 4)<\/span>"},{"path":"https://github.com/r-world-devs/shinyCohortBuilder/articles/gui-filter-layer.html","id":"feedback","dir":"Articles","previous_headings":"GUI Filter Layer as a S3 Method","what":"feedback","title":"Implementing custom GUI filter layer","text":"input function returning UI structure filter input controllers (content visible filter enrolled filtering panel). takes two argument: input_id - Concatenation step_id filter_id (plus namespace). Can used input controller id (doesn’t ). cohort - Cohort object. empty - FALSE default. NULL (feedback plot turned ) feedback return value. TRUE (valid data exists previous filtering step, .e. number rows zero) empty plot returned (preferable small height). function return list three objects: plot_id - id feedback plot output (preferably modification input_id including namespace), output_fun - plot output UI placeholder function, render_fun - plot output rendering logic (excluding output assignment). Example implementation (simplified version used “discrete” filter): Details: render_fun wrapped within (!.null(empty)) {} claim. Inside rendering function body, return empty plot empty = TRUE. ’s recommended generate plot based cached Cohort statistics. filter cache can accessed : cohort$get_cache(step_id, filter_id, state = \"pre\"), :","code":".gui_filter.discrete <- function(filter, ...) {   list(     feedback = function(input_id, cohort, empty = FALSE) {       list(         plot_id = shiny::NS(input_id, \"feedback_plot\") ,         output_fun = ggiraph::girafeOutput,         render_fun = if (!is.null(empty)) {           ggiraph::renderGirafe({             if(empty) { # when no data in parent step               return(                 ggiraph::girafe(                   ggobj      = ggplot2::ggplot(),                   width_svg  = 10,                   height_svg = 0.1                 )               )             }             step_id <- filter$step_id             filter_id <- filter$id              filter_cache <- cohort$get_cache(step_id, filter_id, state = \"pre\")             filter_value <- extract_selected_value(filter$get_params()$value, filter_cache$choices, FALSE)             plot_data <- filter_cache$choices[filter_value]             n_missing <- filter_cache$n_missing             if (identical(filter$get_params()$keep_na, FALSE)) {               n_missing <- 0             }              plot_feedback_bar(plot_data, n_missing)           })         }       )     },     # other methods   ) } step_id <- filter$step_id filter_id <- filter$id"},{"path":"https://github.com/r-world-devs/shinyCohortBuilder/articles/gui-filter-layer.html","id":"server","dir":"Articles","previous_headings":"GUI Filter Layer as a S3 Method","what":"server","title":"Implementing custom GUI filter layer","text":"optional method providing extra logic filter controller application server. function called filter controller rendered. case discrete filter, function used extend logic feedback plot. Whenever field related specific value clicked plot result selecting value input controller. define observer, listens plot click action triggers accordingly “update_filter” action: may spot usage .save_observer, observer passed. method used save observer application memory, observer destroyed whenever filter removed. action taken prevent observers accumulation.","code":".gui_filter.discrete <- function(filter, ...) {   list(     server = function(input_id, input, output, session, cohort) {       shiny::observeEvent(input[[shiny::NS(input_id, \"feedback_plot_selected\")]], {         value <- input[[shiny::NS(input_id, \"feedback_plot_selected\")]]          if (!is.na(value)) {           .trigger_action(session, \"update_filter\", params = list(             step_id = filter$step_id, filter_id = filter$id,             input_name = filter$input_param, input_value = value,             run_flow = FALSE           ))         }       }, ignoreInit = TRUE) %>% .save_observer(input_id, session)     },     # other methods   ) }"},{"path":"https://github.com/r-world-devs/shinyCohortBuilder/articles/gui-filter-layer.html","id":"update","dir":"Articles","previous_headings":"GUI Filter Layer as a S3 Method","what":"update","title":"Implementing custom GUI filter layer","text":"update function defining filter input controllers updated based previous current step data. method called scenarios: previous filtering step modified, filter displays post statistics (.e. discrete filer) current data changed (example making changes current step), filter GUI panel using multiple input controllers one changed, “Clear Step” button pressed, update_filter action triggered directly (advanced case) update function strongly related input one. parameters passed related update* methods follow assumptions stated input. one extra rule regarding “Clear Step” scenario desrcibe . update function parameters defined: session - Shiny session object passed update* methods. input_id - ID passed input. cohort - Cohort object. reset - TRUE, update method called due click “Clear Step” button. present sample update method used discrete filter: can see, reuse discrete_input_params function generating parameters, two extra arguments passed : reset - information states “Clear Step” clicked, update - indicator states generate parameters update method. Now let’s highlight reset update argument affect returned parameters: reset = TRUE controller select available options (range). , possible options can extracted : update = TRUE filter controller label cleared. small difference comparing case label defined initializing controller. case label = NULL update valid value id label = character(0). need add: Looking code sample update may realize, usage .update_keep_na_input. can use function whenever use .keep_na_input input function.","code":".gui_filter.discrete <- function(filter, ...) {   list(     update = function(session, input_id, cohort, reset = FALSE, ...) {       update_params <- discrete_input_params(filter, input_id, cohort, reset = reset, update = TRUE, ...)       do.call(         shiny::updateCheckboxGroupInput,         append(           list(session = session),           update_params         )       )       .update_keep_na_input(session, input_id, filter, cohort)     },     # other methods   ) } names(   cohort$get_cache(step_id, filter_id, state = \"pre\")$choices   ) label = if (update) character(0) else NULL"},{"path":"https://github.com/r-world-devs/shinyCohortBuilder/articles/gui-filter-layer.html","id":"post_stats","dir":"Articles","previous_headings":"GUI Filter Layer as a S3 Method","what":"post_stats","title":"Implementing custom GUI filter layer","text":"Static logical value informing whether filter can display post statistics. TRUE, filter updated (using attached update method) whenever filter changed (assure date value post statistic).","code":""},{"path":"https://github.com/r-world-devs/shinyCohortBuilder/articles/gui-filter-layer.html","id":"multi_input","dir":"Articles","previous_headings":"GUI Filter Layer as a S3 Method","what":"multi_input","title":"Implementing custom GUI filter layer","text":"Logical value informing whether filter GUI panel uses multiple input controllers specify filter value (range filter case slider numeric input used). TRUE, shinyCohortBuilder informed update input controller whenever one changes.","code":""},{"path":"https://github.com/r-world-devs/shinyCohortBuilder/articles/package-options.html","id":"cb_verbose","dir":"Articles","previous_headings":"","what":"cb_verbose","title":"shinyCohortBuilder options","text":"Default value: FALSE. option enabled (options(\"cb_verbose\" = TRUE)) operations taken filtering panel result printing readable log operation state.","code":""},{"path":"https://github.com/r-world-devs/shinyCohortBuilder/articles/package-options.html","id":"scb_verbose","dir":"Articles","previous_headings":"","what":"scb_verbose","title":"shinyCohortBuilder options","text":"Default value: FALSE. Similar cb_vebose, enabling option (options(\"scb_verbose\" = TRUE)) results printing readable logs. Logs visible popups Shiny application filtering panel used.","code":""},{"path":"https://github.com/r-world-devs/shinyCohortBuilder/articles/package-options.html","id":"scb_render_all","dir":"Articles","previous_headings":"","what":"scb_render_all","title":"shinyCohortBuilder options","text":"Default value: FALSE. option enabled, results rendering filter related controllers filter becomes active (enrolled filtering panel). way large amount filters configured can improve performance rendering filtering panel (.e. initializing app). prefer render filters filtering panel generated, just set options(\"scb_render_all\" = TRUE). configuration, can realize slight delay filter controllers enrolled first time.","code":""},{"path":"https://github.com/r-world-devs/shinyCohortBuilder/articles/package-options.html","id":"scb_minified","dir":"Articles","previous_headings":"","what":"scb_minified","title":"shinyCohortBuilder options","text":"Default value: TRUE. options enabled results using minified version css js files used filtering panel. want use original source (.e. debugging) please set options(\"scb_minified\" = FALSE).","code":""},{"path":"https://github.com/r-world-devs/shinyCohortBuilder/articles/shinyCohortBuilder.html","id":"shinycohortbuilder-vs--cohortbuilder","dir":"Articles","previous_headings":"","what":"shinyCohortBuilder vs. cohortBuilder","title":"Introduction to shinyCohortBuilder","text":"creating cohortBuilder main goal easily allow using features Shiny. approach taken cohortBuilder: keeping Cohort objects R6 class, introduced hooks system able fully separate cohortBuilder operating backend, also enabled implement features GUI named shinyCohortBuilder. rule using cohortBuilder shinyCohortBuilder simple. cohortBuilder create Source configure Cohort filtering steps - shinyCohortBuilder generate filtering panel Shiny based Cohort.","code":""},{"path":"https://github.com/r-world-devs/shinyCohortBuilder/articles/shinyCohortBuilder.html","id":"cohort-to-filtering-panel","dir":"Articles","previous_headings":"","what":"Cohort to Filtering Panel","title":"Introduction to shinyCohortBuilder","text":"configure Cohort filters want see panel, use cb_ui cb_server place panel application UI run ’s server logic:","code":"library(shiny) library(cohortBuilder) library(shinyCohortBuilder)  ui <- fluidPage(   cb_ui(\"panel_id\") )  server <- function(input, output, session) {   source_obj <- set_source(tblist(iris = iris))   cohort_obj <- cohort(     source_obj,     filter(\"discrete\", id = \"species\", dataset = \"iris\", variable = \"Species\"),     filter(\"range\", id = \"petal_length\", dataset = \"iris\", variable = \"Petal.Length\")   )   cb_server(\"panel_id\", cohort_obj) }  shinyApp(ui, server)"},{"path":"https://github.com/r-world-devs/shinyCohortBuilder/articles/shinyCohortBuilder.html","id":"filter-vs-filter-controller","dir":"Articles","previous_headings":"","what":"Filter vs Filter Controller","title":"Introduction to shinyCohortBuilder","text":"Now let’s highlight filter parameters affect filter controller GUI. Filter value default selection. precise filter value parameter (e.g. value “discrete” range range filter) value taken initial selection filter controller.  skip providing value (set NA) initial selection calculated automatically: discrete multi_discrete filter options chosen, range, date_range filters whole available range selected, discrete_text filter available (comma separated) options chosen. Inactive filter collapsed. Whenever define filter, one enrolled ready use default:  want provide selected filter optional one Shiny, may set active = FALSE filter configuration. GUI, filter collapsed skipped computing Cohort data. UX (performance) perspective ’s worth always collapse filters initially. may achieve setting options(\"cb_active_filter\" = FALSE) create filters. Dropdown checkbox group discrete filter default, discrete filters transformed checkbox group input controller. multiple options choose, approach may become inconvenient. may switch checkbox group search dropdown (shinyWidgets::virtualSelectInput) providing gui_input = \"vs\" parameter discrete filter.  Slider numeric input range filter range filters default input GUI connection slider numeric range input. can choose input use providing selected gui_input parameter: gui_input = \"numeric\" - numeric range , gui_input = \"slider\" - slider , gui_input = c(\"slider\", \"numeric\") skipped - options.  Mapping discrete filter options may happen columns storing key, readable values users. case ’d like replace keys understandable labels input controller. achieve goal need create mapping function taking keys vector argument cohort returning labels. function added Source creation using value_mappings argument. pass function name (character) value_mapping parameter filter.","code":"library(shiny) library(cohortBuilder) library(shinyCohortBuilder)  program_vm <- function(programs, cohort) {   c(     \"standard\" = \"Standard\",      \"premium\" = \"Premium\",      \"vip\" = \"VIP\"   )[programs] }  librarian_source <- set_source(   as.tblist(librarian),   value_mappings = list(program_vm = program_vm) ) librarian_cohort <- cohort(   librarian_source,   filter(     \"discrete\",      id = \"program\",      dataset = \"borrowers\",      variable = \"program\",     value_mapping = \"program_vm\",     gui_input = \"vs\"   ) )  gui(librarian_cohort)"},{"path":"https://github.com/r-world-devs/shinyCohortBuilder/articles/shinyCohortBuilder.html","id":"automatic-filters-configuration","dir":"Articles","previous_headings":"","what":"Automatic filters configuration","title":"Introduction to shinyCohortBuilder","text":"want skip configuring filters tables columns source, may use shinyCohortBuilder::autofilter method. method applied Source, scan columns included Source automatically configure proper filters . filters stored within Source, ’s enought pass object Cohort: autofilter method checks column type count levels apply proper filter: numeric integer class - range filter, factor character levels count equal column length (usually primary keys) - discrete_text filter, factor character less 4 levels, logical column - discrete filter checkbox group input, factor character 4 levels - discrete filter virtual select input. Providing custom rules added future released shinyCohortBuilder.","code":"iris_source <- set_source(tblist(iris = iris)) %>%    autofilter() iris_cohort <- cohort(iris_source)  sum_up(iris_cohort) #> >> Step ID: 1 #> -> Filter ID: OSNCJ1653246385126 #>    Filter Type: range #>    Filter Parameters: #>      dataset: iris #>      variable: Sepal.Length #>      range: NA #>      keep_na: TRUE #>      description:  #>      active: TRUE #> -> Filter ID: RVKET1653246385126 #>    Filter Type: range #>    Filter Parameters: #>      dataset: iris #>      variable: Sepal.Width #>      range: NA #>      keep_na: TRUE #>      description:  #>      active: TRUE #> -> Filter ID: NVYZE1653246385126 #>    Filter Type: range #>    Filter Parameters: #>      dataset: iris #>      variable: Petal.Length #>      range: NA #>      keep_na: TRUE #>      description:  #>      active: TRUE #> -> Filter ID: SYYIC1653246385126 #>    Filter Type: range #>    Filter Parameters: #>      dataset: iris #>      variable: Petal.Width #>      range: NA #>      keep_na: TRUE #>      description:  #>      active: TRUE #> -> Filter ID: HZGJI1653246385127 #>    Filter Type: discrete #>    Filter Parameters: #>      dataset: iris #>      variable: Species #>      value: NA #>      keep_na: TRUE #>      description:  #>      active: TRUE"},{"path":"https://github.com/r-world-devs/shinyCohortBuilder/articles/shinyCohortBuilder.html","id":"cohortbuilder-to-gui-features","dir":"Articles","previous_headings":"","what":"cohortBuilder to GUI features","title":"Introduction to shinyCohortBuilder","text":"Now ’re gonna highlight features available cohortBuilder can also enabled GUI panel.","code":""},{"path":"https://github.com/r-world-devs/shinyCohortBuilder/articles/shinyCohortBuilder.html","id":"multiple-steps-filtering","dir":"Articles","previous_headings":"cohortBuilder to GUI features","what":"Multiple-steps filtering","title":"Introduction to shinyCohortBuilder","text":"Available cb_ui(..., steps = TRUE). options adds Add Step button filtering panel attaches Delete buttons filtering step. functionality can perform filtering operations multiple steps. one assumption regarding Add Step feature - newly added filtering step replicated based last available step Cohort (choices statistics related previous step). future releases plan allow adding customized steps. Currently can provide different steps panel defining directly Cohort (rendering GUI).","code":""},{"path":"https://github.com/r-world-devs/shinyCohortBuilder/articles/shinyCohortBuilder.html","id":"reproducible-code","dir":"Articles","previous_headings":"cohortBuilder to GUI features","what":"Reproducible code","title":"Introduction to shinyCohortBuilder","text":"Available cb_ui(..., code = TRUE). option adds Reproducible Code button filtering panel. button clicked modal shows presenting reproducible code source data filtering.","code":""},{"path":"https://github.com/r-world-devs/shinyCohortBuilder/articles/shinyCohortBuilder.html","id":"saving-and-restoring-cohort-state","dir":"Articles","previous_headings":"cohortBuilder to GUI features","what":"Saving and restoring Cohort state","title":"Introduction to shinyCohortBuilder","text":"Available cb_ui(..., state = TRUE). Provides Get State Save State buttons filtering panel. Get State opens modal Cohort configuration state JSON format. JSON state can used restore filtering panel state using Save State Button.","code":""},{"path":"https://github.com/r-world-devs/shinyCohortBuilder/articles/shinyCohortBuilder.html","id":"display-attrition-plot","dir":"Articles","previous_headings":"cohortBuilder to GUI features","what":"Display attrition plot","title":"Introduction to shinyCohortBuilder","text":"Available cb_ui(..., attrition = TRUE). option adds Show Attrition button filtering panel. clicked, modal shows data attrition plot across filtering steps handy summary. custom attrition defined (.custom_attrition method) used source, modal shows custom attrition plot modal tabset. See custom gui layer.","code":""},{"path":[]},{"path":"https://github.com/r-world-devs/shinyCohortBuilder/articles/shinyCohortBuilder.html","id":"run-button","dir":"Articles","previous_headings":"Extra features","what":"Run button","title":"Introduction to shinyCohortBuilder","text":"Available cb_server(..., run_button = TRUE). option enabled “play” button displayed filtering step panel. , data operation run button clicked. shinyCohortBuilder user action (changes filters selection) triggers data calculation respect selected options. run button enabled, users can specify filters setup first run calculations request. option especially useful working large datasets remote data connections (.e. using “db” source cohortBuilder.db).","code":""},{"path":"https://github.com/r-world-devs/shinyCohortBuilder/articles/shinyCohortBuilder.html","id":"bookmarking","dir":"Articles","previous_headings":"Extra features","what":"Bookmarking","title":"Introduction to shinyCohortBuilder","text":"Available cb_server(..., enable_bookmarking = TRUE). use bookmarking Shiny application option may especially useful. turned , filtering panel integrated native shiny bookmarking can use restore application state along application inputs (outside filtering panel).","code":""},{"path":"https://github.com/r-world-devs/shinyCohortBuilder/articles/shinyCohortBuilder.html","id":"visibility-of-data-statistics","dir":"Articles","previous_headings":"Extra features","what":"Visibility of data statistics","title":"Introduction to shinyCohortBuilder","text":"Available cb_server(..., stats = c(\"pre\", \"post\")). Depending stats parameter may choose statistics visible filtering panel. four options: stats = c(\"pre\", \"post\") Results displaying number table rows (statistic implemented source layer) filtering step. shows pre post filtering statistics discrete filter choices (counts choice). stats = \"pre\" previous step statistics shown. stats = \"post\" 1. current step statistics shown (filtering). stats = NULL statistics displayed .","code":""},{"path":"https://github.com/r-world-devs/shinyCohortBuilder/articles/shinyCohortBuilder.html","id":"feedback-plots","dir":"Articles","previous_headings":"Extra features","what":"Feedback plots","title":"Introduction to shinyCohortBuilder","text":"Available cb_server(..., feedback = TRUE). enabled, feedback plots (usually displaying data distribution) show filter.","code":""},{"path":"https://github.com/r-world-devs/shinyCohortBuilder/articles/updating-source.html","id":"consistent-data","dir":"Articles","previous_headings":"","what":"Consistent data","title":"Updating Source in Shiny","text":"working consistent datasets usually want keep filtering panel unchanged data version. situation: Configure filtering steps initializing cohort. updating source, use update_source(cohort_object, keep_steps = TRUE). result: configured filtering steps remain unchanged, additional rendering filtering panel take place Shiny results faster update, filters panel updated new data filtering options (choices, ranges etc.). application presents described approach:","code":"library(shiny) library(cohortBuilder) library(shinyCohortBuilder)  mtcars_list = list(   \"0\" = dplyr::filter(mtcars, am == 0),   \"1\" = dplyr::filter(mtcars, am == 1) )  ui <- fluidPage(   sidebarLayout(     sidebarPanel(       radioButtons(\"version\", \"Version\", choices = c(\"0\", \"1\")),       cb_ui(\"mtcars\")     ),     mainPanel(       verbatimTextOutput(\"cohort_data\")     )   )   )  server <- function(input, output, session) {   init_source <- set_source(tblist(mtcars = mtcars_list[[\"0\"]]))   mt_cohort <- cohort(     init_source,     filter(\"range\", id = \"mpg\", dataset = \"mtcars\", variable = \"mpg\", active = FALSE),     filter(\"range\", id = \"qsec\", dataset = \"mtcars\", variable = \"qsec\", active = FALSE)   )      cb_server(\"mtcars\", mt_cohort)      observeEvent(input$version, {     new_source <- set_source(tblist(mtcars = mtcars_list[[input$version]]))     update_source(mt_cohort, new_source, keep_steps = TRUE)   }) }  shinyApp(ui, server)"},{"path":"https://github.com/r-world-devs/shinyCohortBuilder/articles/updating-source.html","id":"inconsistent-data","dir":"Articles","previous_headings":"","what":"Inconsistent data","title":"Updating Source in Shiny","text":"filters configuration different across multiple data sources want render filtering panel scratch everytime source updated. scenario: Keep filtering steps configuration within source. updating source, use update_source(cohort_object, keep_steps = FALSE). result: configured filtering steps Source used update Cohort configuration, previous filtering panel removed, new filtering panel rendered based new configuration. application presents described approach:","code":"library(shiny) library(cohortBuilder) library(shinyCohortBuilder)  source_mtcars <- set_source(   tblist(mtcars = mtcars),   filter(\"range\", id = \"mpg\", dataset = \"mtcars\", variable = \"mpg\", active = FALSE),   filter(\"range\", id = \"qsec\", dataset = \"mtcars\", variable = \"qsec\", active = FALSE) )  source_iris <- set_source(   tblist(iris = iris),   filter(\"discrete\", id = \"species\", dataset = \"iris\", variable = \"Species\", active = FALSE),   filter(\"range\", id = \"petal_length\", dataset = \"iris\", variable = \"Petal.length\", active = FALSE) )  ui <- fluidPage(   sidebarLayout(     sidebarPanel(       radioButtons(\"dataset\", \"Dataset\", choices = c(\"mtcars\", \"iris\")),       cb_ui(\"data_panel\")     ),     mainPanel(       verbatimTextOutput(\"cohort_data\")     )   )   )  server <- function(input, output, session) {   cohort_object <- cohort(source_mtcars)   cb_server(\"data_panel\", cohort_object)      observeEvent(input$dataset, {     if (input$dataset = \"mtcars\") {       update_source(cohort_object, source_mtcars, keep_steps = FALSE)       }     if (input$dataset = \"iris\") {       update_source(cohort_object, source_iris, keep_steps = FALSE)       }   }) }  shinyApp(ui, server)"},{"path":"https://github.com/r-world-devs/shinyCohortBuilder/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Krystian Igras. Maintainer, author. Kamil Wais. Author. Adam Foryś. Contributor.","code":""},{"path":"https://github.com/r-world-devs/shinyCohortBuilder/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Igras K, Wais K (2022). shinyCohortBuilder: Modular Cohort-Building Framework Analytical Dashboards. R package version 0.0.0.9037.","code":"@Manual{,   title = {shinyCohortBuilder: Modular Cohort-Building Framework for Analytical Dashboards},   author = {Krystian Igras and Kamil Wais},   year = {2022},   note = {R package version 0.0.0.9037}, }"},{"path":"https://github.com/r-world-devs/shinyCohortBuilder/index.html","id":null,"dir":"","previous_headings":"","what":"Modular Cohort-Building Framework for Analytical Dashboards","title":"Modular Cohort-Building Framework for Analytical Dashboards","text":"Move cohortBuilder workflow Shiny.","code":""},{"path":"https://github.com/r-world-devs/shinyCohortBuilder/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Modular Cohort-Building Framework for Analytical Dashboards","text":"","code":"# CRAN version install.packages(\"shinyCohortBuilder\")  # Latest development version remotes::install_github(\"https://github.com/r-world-devs/shinyCohortBuilder\")"},{"path":"https://github.com/r-world-devs/shinyCohortBuilder/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"Modular Cohort-Building Framework for Analytical Dashboards","text":"shinyCohortBuilder can use cohortBuilder features within shiny application. Configure Source Cohort filters cohortBuilder (set value/range NA select options / whole range, active  = FALSE collapse filter GUI): apply application cb_ui cb_server: may listen cohort data changes input[[<cohort-id>-data-updated]]: run filtering panel locally just makes work cohortBuilder easier:  ’re interested features shinyCohortBuilder please visit package website.","code":"librarian_source <- set_source(as.tblist(librarian)) librarian_cohort <- cohort(   librarian_source,   filter(     \"discrete\", id = \"author\", dataset = \"books\",      variable = \"author\", value = \"Dan Brown\",      active = FALSE   ),   filter(     \"range\", id = \"copies\", dataset = \"books\",      variable = \"copies\", range = c(5, 10),      active = FALSE   ),   filter(     \"date_range\", id = \"registered\", dataset = \"borrowers\",      variable = \"registered\", range = c(as.Date(\"2010-01-01\"), Inf),     active = FALSE   ) ) library(shiny)  ui <- fluidPage(   sidebarLayout(     sidebarPanel(       cb_ui(\"librarian\")     ),     mainPanel()   ) )  server <- function(input, output, session) {   cb_server(\"librarian\", librarian_cohort) }  shinyApp(ui, server) library(shiny)  ui <- fluidPage(   sidebarLayout(     sidebarPanel(       cb_ui(\"librarian\")     ),     mainPanel(       verbatimTextOutput(\"cohort_data\")     )   ) )  server <- function(input, output, session) {   cb_server(\"librarian\", librarian_cohort)      output$cohort_data <- renderPrint({     input[[\"librarian-data-updated\"]]     get_data(librarian_cohort)   })    }  shinyApp(ui, server) gui(librarian_cohort)"},{"path":"https://github.com/r-world-devs/shinyCohortBuilder/index.html","id":"acknowledgement","dir":"","previous_headings":"","what":"Acknowledgement","title":"Modular Cohort-Building Framework for Analytical Dashboards","text":"Special thanks : Kamil Wais highlighting need package relevance real-world applications. Adam Foryś technical support, numerous suggestions current future implementation package. Paweł Kawski indication initial assumptions package based real-world medical data.","code":""},{"path":"https://github.com/r-world-devs/shinyCohortBuilder/index.html","id":"getting-help","dir":"","previous_headings":"","what":"Getting help","title":"Modular Cohort-Building Framework for Analytical Dashboards","text":"case found bugs, feature request general question please file issue package Github. may also contact package author directly via email krystian8207@gmail.com.","code":""},{"path":"https://github.com/r-world-devs/shinyCohortBuilder/reference/autofilter.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate filters definition based on the Source data — autofilter","title":"Generate filters definition based on the Source data — autofilter","text":"method analyze source data structure, generate proper filters based data (e.g. column types) attach source.","code":""},{"path":"https://github.com/r-world-devs/shinyCohortBuilder/reference/autofilter.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate filters definition based on the Source data — autofilter","text":"","code":"autofilter(source, ...)  # S3 method for default autofilter(source, ...)  # S3 method for tblist autofilter(source, ...)"},{"path":"https://github.com/r-world-devs/shinyCohortBuilder/reference/autofilter.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate filters definition based on the Source data — autofilter","text":"source Source object. ... Extra arguments passed specific method.","code":""},{"path":[]},{"path":"https://github.com/r-world-devs/shinyCohortBuilder/reference/cb_ui.html","id":null,"dir":"Reference","previous_headings":"","what":"Include filtering panel in Shiny — cb_ui","title":"Include filtering panel in Shiny — cb_ui","text":"function returns filtering panel placeholder, may use custom Shiny application. Use UI part application.","code":""},{"path":"https://github.com/r-world-devs/shinyCohortBuilder/reference/cb_ui.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Include filtering panel in Shiny — cb_ui","text":"","code":"cb_ui(id, ..., state = FALSE, steps = TRUE, code = TRUE, attrition = TRUE)  cb_server(   id,   cohort,   run_button = FALSE,   stats = c(\"pre\", \"post\"),   feedback = FALSE,   enable_bookmarking = shiny::getShinyOption(\"bookmarkStore\", default = \"disable\"),   show_help = TRUE )"},{"path":"https://github.com/r-world-devs/shinyCohortBuilder/reference/cb_ui.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Include filtering panel in Shiny — cb_ui","text":"id Id module used render panel. ... Extra attributes passed panel div container. state Set TRUE (default) enable get/set state panel. steps Set TRUE (default) multiple steps available. code Set TRUE (default) enable reproducible code panel. attrition Set TRUE (default) enable attrition plot panel. cohort Cohort object storing filtering steps configuration. run_button Run button displayed? , current step computations run clicked. stats Choose statistics displayed data (filters). Possible options : \"pre\" - previous step stat, \"post\" - current step stats, `c(\"pre\", \"post\")` - NULL stats. feedback Set TRUE (default) feedback plots displayed filter. enable_bookmarking Set TRUE (default) panel compatible native shiny bookmarking. show_help Set TRUE (default) enable help buttons.","code":""},{"path":"https://github.com/r-world-devs/shinyCohortBuilder/reference/demo_app.html","id":null,"dir":"Reference","previous_headings":"","what":"Run demo application — demo_app","title":"Run demo application — demo_app","text":"demo presents available filters toolbox features.","code":""},{"path":"https://github.com/r-world-devs/shinyCohortBuilder/reference/demo_app.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run demo application — demo_app","text":"","code":"demo_app(   steps = TRUE,   stats = c(\"pre\", \"post\"),   run_button = FALSE,   feedback = TRUE,   state = TRUE,   bootstrap = 3,   enable_bookmarking = TRUE,   code = TRUE,   attrition = TRUE,   show_help = TRUE )"},{"path":"https://github.com/r-world-devs/shinyCohortBuilder/reference/demo_app.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run demo application — demo_app","text":"steps Set TRUE (default) multiple steps available. stats Choose statistics displayed data (filters). Possible options : \"pre\" - previous step stat, \"post\" - current step stats, `c(\"pre\", \"post\")` - NULL stats. run_button Run button displayed? , current step computations run clicked. feedback Set TRUE (default) feedback plots displayed filter. state Set TRUE (default) enable get/set state panel. bootstrap Boostrap version used filtering panel. See bs_theme version argument. enable_bookmarking Set TRUE (default) panel compatible native shiny bookmarking. code Set TRUE (default) enable reproducible code panel. attrition Set TRUE (default) enable attrition plot panel. show_help Set TRUE (default) enable help buttons.","code":""},{"path":"https://github.com/r-world-devs/shinyCohortBuilder/reference/dot-cb_input.html","id":null,"dir":"Reference","previous_headings":"","what":"Create input controller insensitive to server updated — .cb_input","title":"Create input controller insensitive to server updated — .cb_input","text":"Input controllers created `.cb_input` sending value server user changes value directly browser. means `update*` functions visible effect application output. method used filter input controller precise filter value updated input selection changes.","code":""},{"path":"https://github.com/r-world-devs/shinyCohortBuilder/reference/dot-cb_input.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create input controller insensitive to server updated — .cb_input","text":"","code":".cb_input(ui, data_param, ..., priority = NULL)"},{"path":"https://github.com/r-world-devs/shinyCohortBuilder/reference/dot-cb_input.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create input controller insensitive to server updated — .cb_input","text":"ui UI defining input controllers. data_param Name parameter updated filter whenever user change input value. ... Extra attributes passed input div container. priority Set 'event' force sending value.","code":""},{"path":"https://github.com/r-world-devs/shinyCohortBuilder/reference/dot-pre_post_stats.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate structure of pre/post statistics — .pre_post_stats","title":"Generate structure of pre/post statistics — .pre_post_stats","text":"method exported custom extensions use.","code":""},{"path":"https://github.com/r-world-devs/shinyCohortBuilder/reference/dot-pre_post_stats.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate structure of pre/post statistics — .pre_post_stats","text":"","code":".pre_post_stats(   current,   previous,   name,   brackets = FALSE,   percent = FALSE,   stats = c(\"pre\", \"post\") )"},{"path":"https://github.com/r-world-devs/shinyCohortBuilder/reference/dot-pre_post_stats.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate structure of pre/post statistics — .pre_post_stats","text":"current Current step statistic value. previous Previous step statistic value. name Name displayed nearby statistics output. brackets TRUE, statistics displayed brackets. percent current/previous ration percentages displayed? stats Vector \"pre\" \"post\" defining statistics returned. \"pre\" previous, \"post\" current NULL none.","code":""},{"path":"https://github.com/r-world-devs/shinyCohortBuilder/reference/dot-render_filter.html","id":null,"dir":"Reference","previous_headings":"","what":"Define filter related output in filtering panel — .render_filter","title":"Define filter related output in filtering panel — .render_filter","text":"method exported custom extensions use.","code":""},{"path":"https://github.com/r-world-devs/shinyCohortBuilder/reference/dot-render_filter.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Define filter related output in filtering panel — .render_filter","text":"","code":".render_filter(filter, step_id, cohort, ns)"},{"path":"https://github.com/r-world-devs/shinyCohortBuilder/reference/dot-render_filter.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Define filter related output in filtering panel — .render_filter","text":"filter Filter object. step_id Id step. cohort Cohort object. ns Namespace function.","code":""},{"path":"https://github.com/r-world-devs/shinyCohortBuilder/reference/dot-save_observer.html","id":null,"dir":"Reference","previous_headings":"","what":"Save observer to user session — .save_observer","title":"Save observer to user session — .save_observer","text":"method used store created observers (used implement extra filter logic). saved observer destroyed filtering step removed prevents duplicated execultion accumulated observers.","code":""},{"path":"https://github.com/r-world-devs/shinyCohortBuilder/reference/dot-save_observer.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Save observer to user session — .save_observer","text":"","code":".save_observer(observer, id, session)"},{"path":"https://github.com/r-world-devs/shinyCohortBuilder/reference/dot-save_observer.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Save observer to user session — .save_observer","text":"observer `observe` `observeEvent` saved. id observer. Preferably prefixed step_id. session Shiny session object.","code":""},{"path":"https://github.com/r-world-devs/shinyCohortBuilder/reference/dot-sendOutput.html","id":null,"dir":"Reference","previous_headings":"","what":"Send output rendering — .sendOutput","title":"Send output rendering — .sendOutput","text":"Functional approach rendering output. Equivalent `output[[name]] <- rendering`.","code":""},{"path":"https://github.com/r-world-devs/shinyCohortBuilder/reference/dot-sendOutput.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Send output rendering — .sendOutput","text":"","code":".sendOutput(name, rendering, session = shiny::getDefaultReactiveDomain())"},{"path":"https://github.com/r-world-devs/shinyCohortBuilder/reference/dot-sendOutput.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Send output rendering — .sendOutput","text":"name Name output rendered rendering Rendering expression sent. session Shiny session object.","code":""},{"path":"https://github.com/r-world-devs/shinyCohortBuilder/reference/gui-filter-layer.html","id":null,"dir":"Reference","previous_headings":"","what":"Return GUI layer methods for filter of specified type — gui-filter-layer","title":"Return GUI layer methods for filter of specified type — gui-filter-layer","text":"filter type `.gui_filter` method return list objects: input UI structure defining filter input controllers. feedback List defining feedback plot output. server Optional serverside expression attached filter panel (e.g. filter specific observers). update expression used updating filter panel based configuration. post_stats TRUE post statistics displayed filter controller (e.g. discrete filter).     FALSE, operations skipped results better performance. multi_input TRUE multiple input controllers used providing     filter value (e.g. range input numericInput sliderInput used).     FALSE, operations skipped results better performance. want learn creating filter layers see `vignette(\"gui-filter-layer\")`.","code":""},{"path":"https://github.com/r-world-devs/shinyCohortBuilder/reference/gui-filter-layer.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Return GUI layer methods for filter of specified type — gui-filter-layer","text":"","code":".gui_filter(filter, ...)  # S3 method for discrete .gui_filter(filter, ...)  # S3 method for range .gui_filter(filter, ...)  # S3 method for date_range .gui_filter(filter, ...)  # S3 method for discrete_text .gui_filter(filter, ...)  # S3 method for multi_discrete .gui_filter(filter, ...)"},{"path":"https://github.com/r-world-devs/shinyCohortBuilder/reference/gui-filter-layer.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Return GUI layer methods for filter of specified type — gui-filter-layer","text":"filter Filter object. ... Extra arguments passed specific method.","code":""},{"path":[]},{"path":"https://github.com/r-world-devs/shinyCohortBuilder/reference/gui.html","id":null,"dir":"Reference","previous_headings":"","what":"Run filtering panel locally — gui","title":"Run filtering panel locally — gui","text":"Run filtering panel locally","code":""},{"path":"https://github.com/r-world-devs/shinyCohortBuilder/reference/gui.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run filtering panel locally — gui","text":"","code":"gui(   cohort,   steps = TRUE,   stats = c(\"pre\", \"post\"),   run_button = FALSE,   feedback = TRUE,   state = TRUE,   bootstrap = 3,   enable_bookmarking = TRUE,   code = TRUE,   attrition = TRUE,   show_help = TRUE )"},{"path":"https://github.com/r-world-devs/shinyCohortBuilder/reference/gui.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run filtering panel locally — gui","text":"cohort Cohort object configured filters. steps Set TRUE (default) multiple steps available. stats Choose statistics displayed data (filters). Possible options : \"pre\" - previous step stat, \"post\" - current step stats, `c(\"pre\", \"post\")` - NULL stats. run_button Run button displayed? , current step computations run clicked. feedback Set TRUE (default) feedback plots displayed filter. state Set TRUE (default) enable get/set state panel. bootstrap Boostrap version used filtering panel. See bs_theme version argument. enable_bookmarking Set TRUE (default) panel compatible native shiny bookmarking. code Set TRUE (default) enable reproducible code panel. attrition Set TRUE (default) enable attrition plot panel. show_help Set TRUE (default) enable help buttons.","code":""},{"path":"https://github.com/r-world-devs/shinyCohortBuilder/reference/gui.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Run filtering panel locally — gui","text":"","code":"if (interactive()) {   mtcars_source <- set_source(tblist(mtcars = mtcars))   mtcars_cohort <- cohort(     mtcars_source,     filter(\"discrete\", id = \"am\", dataset = \"mtcars\", variable = \"am\", value = 1)   )   gui(mtcars_cohort) }"},{"path":"https://github.com/r-world-devs/shinyCohortBuilder/reference/rendering-custom-attrition.html","id":null,"dir":"Reference","previous_headings":"","what":"Method for generating custom attrition output — rendering-custom-attrition","title":"Method for generating custom attrition output — rendering-custom-attrition","text":"method defined selected source, output displayed attrition modal tab.","code":""},{"path":"https://github.com/r-world-devs/shinyCohortBuilder/reference/rendering-custom-attrition.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Method for generating custom attrition output — rendering-custom-attrition","text":"","code":".custom_attrition(source, ...)"},{"path":"https://github.com/r-world-devs/shinyCohortBuilder/reference/rendering-custom-attrition.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Method for generating custom attrition output — rendering-custom-attrition","text":"source Source object. ... Extra arguments passed specific method.","code":""},{"path":"https://github.com/r-world-devs/shinyCohortBuilder/reference/rendering-custom-attrition.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Method for generating custom attrition output — rendering-custom-attrition","text":"Similar .step_attrition method return list `render` `output` expressions.","code":""},{"path":[]},{"path":"https://github.com/r-world-devs/shinyCohortBuilder/reference/rendering-filters.html","id":null,"dir":"Reference","previous_headings":"","what":"Render filtering panels for all the filters included in Cohort — rendering-filters","title":"Render filtering panels for all the filters included in Cohort — rendering-filters","text":"method exported custom extensions use.","code":""},{"path":"https://github.com/r-world-devs/shinyCohortBuilder/reference/rendering-filters.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Render filtering panels for all the filters included in Cohort — rendering-filters","text":"","code":".render_filters(source, ...)  # S3 method for default .render_filters(source, cohort, step_id, ns, ...)  # S3 method for tblist .render_filters(source, cohort, step_id, ns, ...)"},{"path":"https://github.com/r-world-devs/shinyCohortBuilder/reference/rendering-filters.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Render filtering panels for all the filters included in Cohort — rendering-filters","text":"source Source object. ... Extra arguments passed specific method. cohort Cohort object. step_id Id step. ns Namespace function.","code":""},{"path":"https://github.com/r-world-devs/shinyCohortBuilder/reference/rendering-filters.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Render filtering panels for all the filters included in Cohort — rendering-filters","text":"Within method define source data stats output (see .update_data_stats), define loop renders filtering panel filter (using .render_filter).","code":""},{"path":[]},{"path":"https://github.com/r-world-devs/shinyCohortBuilder/reference/rendering-step-attrition.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate output of attrition plot — rendering-step-attrition","title":"Generate output of attrition plot — rendering-step-attrition","text":"method return list two object: render Rendering expression attrition output. output Output expression related rendering (id equal `id` parameter). example:","code":"list(     render = shiny::renderPlot({       cohort$show_attrition()     }),     output = shiny::plotOutput(id)   )"},{"path":"https://github.com/r-world-devs/shinyCohortBuilder/reference/rendering-step-attrition.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate output of attrition plot — rendering-step-attrition","text":"","code":".step_attrition(source, ...)  # S3 method for default .step_attrition(source, id, cohort, session, ...)  # S3 method for tblist .step_attrition(source, id, cohort, session, ...)"},{"path":"https://github.com/r-world-devs/shinyCohortBuilder/reference/rendering-step-attrition.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate output of attrition plot — rendering-step-attrition","text":"source Source object. ... Extra arguments passed specific method. id Id attrition output. cohort Cohort object. session Shiny session object.","code":""},{"path":[]},{"path":"https://github.com/r-world-devs/shinyCohortBuilder/reference/shinyCohortBuilder-package.html","id":null,"dir":"Reference","previous_headings":"","what":"GUI layer for cohortBuilder package — shinyCohortBuilder-package","title":"GUI layer for cohortBuilder package — shinyCohortBuilder-package","text":"GUI layer cohortBuilder package","code":""},{"path":"https://github.com/r-world-devs/shinyCohortBuilder/reference/source-gui-layer.html","id":null,"dir":"Reference","previous_headings":"","what":"Source compatibility methods. — source-gui-layer","title":"Source compatibility methods. — source-gui-layer","text":"List methods allow compatibility different source types. methods defined order make new source layer functioning. See 'Details' section information.","code":""},{"path":"https://github.com/r-world-devs/shinyCohortBuilder/reference/source-gui-layer.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Source compatibility methods. — source-gui-layer","text":"package designed make functionality work multiple data sources. Data source can based example list tables, connection database schema API service allows access operate data. order make new source type layer functioning, following list methods defined: .render_filters .update_data_stats .step_attrition .custom_attrition autofilter Except methods, may extend existing new source providing custom gui filtering methods. See gui-filter-layer. order see details implement custom source check `vignette(\"custom-gui-layer\")`.","code":""},{"path":"https://github.com/r-world-devs/shinyCohortBuilder/reference/trigger-action.html","id":null,"dir":"Reference","previous_headings":"","what":"Trigger filtering panel action — trigger-action","title":"Trigger filtering panel action — trigger-action","text":"two functions allow trigger specific filtering panel action directly Shiny server (.trigger_action) application browser (.trigger_action_js) attached specific JS event, e.g. onclick. Check Details section see possible options.","code":""},{"path":"https://github.com/r-world-devs/shinyCohortBuilder/reference/trigger-action.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Trigger filtering panel action — trigger-action","text":"","code":".trigger_action(session, action, params = NULL)  .trigger_action_js(action, params = list(), ns = function(id) id)"},{"path":"https://github.com/r-world-devs/shinyCohortBuilder/reference/trigger-action.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Trigger filtering panel action — trigger-action","text":"session Shiny session object. action Id action. params List parameters passed specific action method. ns Namespace function (used within Shiny modal).","code":""},{"path":"https://github.com/r-world-devs/shinyCohortBuilder/reference/trigger-action.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Trigger filtering panel action — trigger-action","text":"list possible actions: update_filter Calls `shinyCohortBuilder:::gui_update_filter` triggers filter arguments update. add_step Calls `shinyCohortBuilder:::gui_add_step` triggers adding new filtering step (based configuration previous one). rm_step Calls `shinyCohortBuilder:::gui_rm_step` used remove selected filtering step., clear_step Calls `shinyCohortBuilder:::gui_clear_step` used clear filters configuration selected step. update_step Calls `shinyCohortBuilder:::gui_update_step` used update filters feedback plots specific filter GUI panel. update_data_stats Calls `shinyCohortBuilder:::gui_update_data_stats` called update data statistics. show_repro_code Calls `shinyCohortBuilder:::gui_show_repro_code` used show reproducible code. run_step Calls `shinyCohortBuilder:::gui_run_step` used trigger specific step data calculation. show_state Calls `shinyCohortBuilder:::gui_show_state` used show filtering panel state json. input_state Calls `shinyCohortBuilder:::gui_input_state` used generate modal filtering panel state can provided (json). restore_state Calls `shinyCohortBuilder:::gui_restore_state` used restoring filtering panel state based provided json. show_attrition Calls `shinyCohortBuilder:::gui_show_attrition` method used show attrition data plot(s). `.trigger_action` `.trigger_action_js` methods exported advanced use .","code":""},{"path":"https://github.com/r-world-devs/shinyCohortBuilder/reference/updating-data-statistics.html","id":null,"dir":"Reference","previous_headings":"","what":"Render source data related statistics — updating-data-statistics","title":"Render source data related statistics — updating-data-statistics","text":"function assign rendering displays data source statistics valid output. default, output placed within .render_filters method.","code":""},{"path":"https://github.com/r-world-devs/shinyCohortBuilder/reference/updating-data-statistics.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Render source data related statistics — updating-data-statistics","text":"","code":".update_data_stats(source, ...)  # S3 method for default .update_data_stats(source, step_id, cohort, session, ...)  # S3 method for tblist .update_data_stats(source, step_id, cohort, session, ...)"},{"path":"https://github.com/r-world-devs/shinyCohortBuilder/reference/updating-data-statistics.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Render source data related statistics — updating-data-statistics","text":"source Source object. ... Extra arguments passed specific method. step_id Id filtering step. cohort Cohort object. session Shiny session object.","code":""},{"path":"https://github.com/r-world-devs/shinyCohortBuilder/reference/updating-data-statistics.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Render source data related statistics — updating-data-statistics","text":"rendering output, good practice use cached data statistics available `cohort$get_cache(step_id)`. way, omit running additional computations results performance improvement.","code":""},{"path":[]}]
